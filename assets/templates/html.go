// Code generated by go-bindata.
// sources:
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4f\x6f\xe2\x3e\x10\x3d\x93\x4f\x31\xe2\xa7\x9f\xa0\x12\x24\xa1\x0d\x85\xa6\x01\x69\xef\x95\xf6\x52\xed\xa5\xaa\xd0\x80\xa7\x60\x35\x76\x2c\xdb\xa1\xfc\x51\xbe\xfb\xca\x4e\xb2\x25\xdb\xe5\xd0\x39\x44\x7e\xe3\x37\xcf\x8f\xf1\xe0\xf3\x19\x18\xbd\x71\x49\xd0\x17\xa8\xfa\x50\x55\x41\xb6\xb3\x22\x5f\x06\x00\x00\xd9\x8e\x90\x2d\x83\x5e\x66\xb9\xcd\x69\xc9\x68\x5d\x6e\xb3\xa8\x06\x41\x2f\x33\xf6\x98\x13\xd8\xa3\xa2\x45\xdf\xd2\xc1\x46\x1b\x63\xfa\xcb\xa0\x07\xeb\x82\x1d\xe1\x1c\xf4\x7a\x20\x50\x6f\xb9\x4c\x21\x56\x87\x47\x87\x15\x32\xc6\xe5\xb6\x4d\x40\x15\xf4\xe0\x3f\x81\xaa\x66\x7f\x70\x66\x77\xe9\x24\x8e\xff\xf7\xe4\x1d\xf1\xed\xce\x3a\xbc\xdf\x35\xe4\x2c\xf2\x87\x36\xf6\xa2\xda\x9f\x5f\xbb\x33\x9d\x29\xc6\xf7\xc0\xd9\xc2\xff\x9c\x65\x16\x31\xbe\x6f\xc9\x35\xc3\xaf\xcd\x46\x73\x65\x97\x81\x47\xb0\x47\x0d\xa8\xf8\xea\x9d\x8e\xb0\x00\x56\x6c\x4a\x41\xd2\x86\x8e\x1f\x6e\xc9\xfe\xb0\x56\xf3\x75\x69\x69\xd8\x67\x68\x71\x2c\xe9\x60\x4f\x24\xc7\xa8\xf8\xf8\x9d\x8e\xfd\x9b\xc7\x4f\x19\xef\x6e\x55\xea\xfc\x3b\x42\xbe\x68\x5c\xea\xbc\x23\x65\xf9\xf7\x95\x5c\x4d\x47\xe8\x53\xce\x35\x79\x01\x4f\xa1\x40\x35\xf4\xcd\xb9\x79\xf4\x84\x8b\x03\x51\x6e\x35\x8a\x9f\xca\xf2\x42\x1a\x58\xc0\xb9\xde\x73\x61\x36\x24\x29\xbd\xcc\xb8\xe0\x42\x15\xda\xa6\xf0\xd2\x4d\xfb\x82\xb6\x11\xdd\xad\xd7\x51\x17\x9b\xa2\xd4\x1b\x32\x5f\x94\x5d\x08\x54\x27\x92\xff\xdc\x72\x51\xea\x3c\xfd\xd3\xa4\xd1\x55\xce\xca\x94\x6b\x56\x08\xe4\xd2\xa4\xf0\x32\xc0\xc1\x08\x06\x6b\xf7\xd9\xb8\x0f\x1b\xfc\xed\xe8\xb2\x54\xa1\x46\xe1\xcc\x35\xd3\x91\xb6\x63\x52\x5d\x29\xf2\x76\x0c\x3f\x51\x0a\xd3\xc9\xed\x15\x92\xc0\xc3\xea\x54\x14\x22\x85\xc9\xfd\x57\x46\x15\x5c\x83\xcd\xb2\xfa\x72\xb5\xcd\xc5\x3d\xe1\x91\x34\x2c\xe0\xb9\x86\x61\x4e\xf8\x96\x93\xf5\xe9\x61\xf7\x72\xdb\xf1\xb8\xac\x0c\x91\xb1\xe7\x62\x28\x50\x75\x87\x47\xa0\x0a\x0d\xd9\x5f\x9c\x3e\x86\x2f\x49\x1c\xce\xe2\xe9\xdd\x64\x3e\x9f\x4d\x93\xe4\xf6\x76\x3e\x82\xf1\x2c\x09\xe3\xf8\x61\x76\x9f\x4c\x1e\x92\x64\x3e\x9f\xde\xbd\x8e\x60\x32\x6d\x44\xb2\xa8\xfd\xaf\x65\x51\xfd\xb0\x9c\xcf\x40\x92\xb9\x97\xe6\x77\x00\x00\x00\xff\xff\x8b\x79\xbe\x47\x7d\x04\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 1149, mode: os.FileMode(420), modTime: time.Unix(1567714979, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

