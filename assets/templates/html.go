// Code generated by go-bindata.
// sources:
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xd1\x6e\xe2\x3a\x10\x7d\x26\x5f\x31\xca\xd5\x15\x54\x82\x98\x50\x28\x34\x0d\x48\x7d\xbc\xba\x95\x76\xb5\xdb\xdd\x97\xaa\x42\x26\x9e\x82\xd5\xd8\xb1\x6c\x27\x25\x44\xf9\xf7\x95\x93\xb0\x85\x6d\x91\xd6\x0f\x51\xce\xcc\x99\x99\x33\x93\x89\xab\x0a\x18\xbe\x70\x89\xe0\x0b\xaa\x7c\xa8\x6b\x2f\xde\x59\x91\xae\x3c\x00\x80\x78\x87\x94\xad\xbc\x5e\x6c\xb9\x4d\x71\xc5\x70\x93\x6f\x63\xd2\x02\xaf\x17\x1b\x5b\xa6\x08\xb6\x54\xb8\xf4\x2d\xee\x2d\x49\x8c\xf1\x57\x5e\x0f\x36\x19\x2b\xa1\xf2\x7a\x3d\x10\x54\x6f\xb9\x8c\x60\xac\xf6\x77\x0e\x2b\xca\x18\x97\xdb\xa3\x01\x6a\xaf\x07\xff\x08\xaa\x5a\xf6\x1b\x67\x76\x17\x85\xe3\xf1\xbf\x0d\x79\x87\x7c\xbb\xb3\x0e\x17\xbb\x8e\x1c\x93\xa6\x68\x27\x8f\xb4\xfa\x9a\xf7\xa6\x26\xa3\x96\x8e\x1a\xc6\x28\xd7\xe9\xd2\xaf\x2a\x08\xbe\x3b\xf8\xe3\xdb\x03\xd4\xb5\xdf\x12\x24\xee\xed\x01\xe5\x88\x2a\x3e\x7a\xc5\xb2\xa5\xdd\x7f\xfd\xef\x7f\x2c\x1d\xc9\xb5\xc6\x78\x01\x9c\x2d\x9b\xa1\xac\x62\xc2\x78\xd1\x34\xac\xa8\x6c\xcc\x49\xae\x35\x4a\x3b\xb2\x3c\x45\xe7\x77\x8e\x55\xaf\x13\xe5\x94\x74\xa2\x4c\xa2\xb9\xb2\x2b\xaf\x41\x50\x50\x0d\x54\xf1\xf5\x2b\x96\xb0\x04\x96\x25\xb9\x40\x69\x03\xc7\x0f\xb6\x68\xef\xad\xd5\x7c\x93\x5b\x1c\xf8\x9f\xc9\xf4\xaf\xee\xde\xd3\x34\x3d\xae\x73\x9d\xfe\x4d\xa2\xdf\x03\x71\x29\xde\x73\xb8\xb1\x2f\xe1\x21\x10\x54\x0d\x9a\x46\xaf\xee\x9c\xeb\x84\x61\xa9\xdc\x6a\x2a\xbe\x28\xcb\x33\x69\x60\x09\x55\xeb\x73\xc7\x24\x28\x31\x3a\xb5\xb8\xc3\x85\xca\xb4\x8d\xe0\xe9\xdc\xdc\x04\x1c\x25\x9f\xbb\x9e\x87\xe7\xd8\x64\xb9\x4e\xd0\x7c\xc8\xec\x8e\xa0\xea\x80\xf2\x53\x97\x3b\xb9\x4e\x23\xe8\xef\xac\x55\x26\x22\xa4\x32\x75\xe0\xbe\x4f\xd0\xcd\x31\xc8\xf4\x96\x38\xc3\x01\x25\x29\x30\xb1\x99\x26\x45\x48\x66\xe1\x84\xd0\x34\x25\xd5\xa1\x26\xd5\xbe\x26\x55\x59\x07\xa2\xb0\xfd\xe1\xc5\x1a\x6b\x93\x6f\x58\x26\x28\x97\x26\x82\xa7\x3e\xed\x0f\xa1\xbf\x71\x8f\xc4\x3d\x58\xff\xcf\x8e\x4e\x43\x15\xd5\x54\xb8\xe6\xba\x3d\x88\x8e\x0b\x51\x5f\x08\x72\x82\xd7\x86\x1f\x30\x82\x59\x38\xb9\x40\x12\x74\xbf\x3e\x64\x99\x88\x20\xbc\xf9\xc8\xa8\xbd\x4b\xb0\x7b\xad\xbb\xc5\xfa\xf0\xe1\x1f\x68\x89\x1a\x96\xf0\xd8\xc2\x20\x45\xfa\x92\xa2\x6d\xcc\x83\xf3\xe5\x38\x2e\xe7\x69\x64\x40\x19\x7b\xcc\x06\x82\xaa\xab\xb3\x0a\x82\xaa\xc0\xa0\xfd\xc9\xf1\x6d\xf0\x34\x1d\x07\xf3\xf1\xec\x3a\x5c\x2c\xe6\xb3\xe9\x74\x32\x59\x0c\x61\x34\x9f\x06\xe3\xf1\xed\xfc\x66\x1a\xde\x4e\xa7\x8b\xc5\xec\xfa\x79\x08\xe1\xec\x2c\x49\x4c\x8e\xff\x56\x4c\xda\x0b\xab\xaa\x00\x25\x73\x37\xd8\xaf\x00\x00\x00\xff\xff\x14\x01\x2b\x25\xd5\x04\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 1237, mode: os.FileMode(420), modTime: time.Unix(1567711077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
