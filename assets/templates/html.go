// Code generated by go-bindata.
// sources:
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x6f\xe2\x3c\x10\x3e\x93\x5f\x31\xe2\xd5\x2b\xa8\x04\x31\xa1\x50\x68\x1a\x90\xf6\x5e\x69\x2f\xd5\x5e\xaa\x0a\x19\x3c\x4d\xac\xc6\x89\x65\x4f\x52\x42\x94\xff\xbe\x72\x12\x54\xd8\x2e\x87\x9d\x83\x35\xcf\xcc\x33\x5f\xce\xc4\x75\x0d\x02\xdf\x65\x86\x30\x54\x5c\x0f\xa1\x69\xbc\x28\x21\x95\x6e\x3d\x00\x80\x28\x41\x2e\xb6\xde\x20\x22\x49\x29\x6e\x05\xee\x8b\x38\x62\x1d\xf0\x06\x91\xa5\x2a\x45\xa0\x4a\xe3\x66\x48\x78\x24\x76\xb0\x76\xb8\xf5\x06\xb0\xcf\x45\x05\xb5\x37\x18\x80\xe2\x26\x96\x59\x08\x33\x7d\x7c\x72\x58\x73\x21\x64\x16\x9f\x0d\xd0\x78\x03\xf8\x4f\x71\xdd\xb1\x3f\xa5\xa0\x24\x0c\x66\xb3\xff\x5b\x72\x82\x32\x4e\xc8\xe1\x32\xe9\xc9\x11\x6b\x8b\xf6\xed\xb1\xae\xbf\x56\x77\x35\x5d\x53\x42\x96\x20\xc5\xa6\x1d\x67\x1b\x31\x21\xcb\x33\xb9\x63\xb4\xba\x3d\x18\xa9\x69\xeb\xb5\x08\x4a\x6e\x80\x6b\xb9\xfb\xc0\x0a\x36\x20\xf2\x43\xa1\x30\x23\xdf\xf1\xfd\x18\xe9\x07\x91\x91\xfb\x82\x70\x3c\x14\x9c\xf8\x34\xc3\x23\x9d\x30\x9b\x72\x2d\xa7\x1f\x58\x0d\xef\x9e\xbe\xd2\xb4\xdd\xed\x0a\x93\xfe\x4b\xa2\x36\x68\x5a\x98\xd4\xa5\xfa\xca\xe5\xae\x65\x03\xcf\xbe\xe2\x7a\xdc\x8e\x73\xf7\xe4\x5c\x17\x0c\xe2\x59\x6c\xb8\xfa\xa9\x49\xe6\x99\x85\x0d\xd4\x9d\xcf\x89\x3d\x60\x86\xe1\xa5\xc5\x89\x54\x3a\x37\x14\xc2\xeb\xb5\xb9\x0d\x38\xb7\x7e\xed\x7a\x9b\x5c\x63\x9b\x17\xe6\x80\xf6\x5b\x66\x27\x8a\xeb\x13\x66\x7f\x75\x39\x29\x4c\x1a\xc2\x28\x21\xd2\x36\x64\xac\xb6\x8d\x4f\x32\x45\xbf\xbf\x06\x3f\x37\x31\x73\x86\x13\x66\xac\xc4\x03\xe5\x86\x95\x01\x5b\x06\x73\xc6\xd3\x94\xd5\xa7\x86\xd5\xc7\x86\xd5\x55\xe3\xab\x92\x46\x93\x9b\x35\x76\xb6\xd8\x8b\x5c\x71\x99\xd9\x10\x5e\x47\x7c\x34\x81\xd1\xde\x1d\x07\x77\x88\xd1\x9f\x13\x5d\x86\x6a\x6e\xb8\x72\xc3\xf5\xfb\x10\x9e\x17\xa3\xb9\x11\xe4\x1a\xde\x59\x79\xc2\x10\x96\xc1\xfc\x06\x49\xf1\xe3\xee\x94\xe7\x2a\x84\xe0\xe1\x3b\xa3\xf1\x6e\xc1\x5e\x6d\xfa\x05\xfb\xf6\xe1\x9f\x79\x85\x06\x36\xf0\xd2\x41\x3f\x45\xfe\x9e\x22\xb5\xe6\xf1\xf5\x72\x9c\x97\xf4\x32\xd2\xe7\x42\xbc\xe4\x63\xc5\xf5\xdd\x55\x05\xc5\xb5\x6f\x91\x7e\x49\xfc\x1c\xbf\x2e\x66\xfe\x6a\xb6\xbc\x0f\xd6\xeb\xd5\x72\xb1\x98\xcf\xd7\x13\x98\xae\x16\xfe\x6c\xf6\xb8\x7a\x58\x04\x8f\x8b\xc5\x7a\xbd\xbc\x7f\x9b\x40\xb0\xec\x93\x44\xec\xfc\x77\x45\xac\x7b\x4a\xea\x1a\x30\x13\xee\x6d\xf9\x1d\x00\x00\xff\xff\xdc\x12\x75\xbb\x6f\x04\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 1135, mode: os.FileMode(420), modTime: time.Unix(1567711680, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

