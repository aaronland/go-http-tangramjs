// Code generated by go-bindata.
// sources:
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x3d\x6f\xdb\x30\x10\x9d\xc9\x5f\x71\x55\xd0\xd1\x92\x13\xa0\x46\x20\xc9\xda\xba\x75\x2a\x9a\xb9\xa0\xc4\x8b\x45\x94\x5f\xa0\x4e\x4e\x5c\xc1\xff\xbd\x20\x69\x39\x4e\xda\xb1\x93\xc5\xf3\xe3\x7b\x77\x8f\x8f\x5c\x16\x90\xf8\xac\x2c\x42\x61\x84\x2f\xe0\x7c\xe6\xed\x48\x46\x77\x1c\x00\xa0\x1d\x51\xc8\x8e\xb3\x96\x14\x69\xec\x24\xf6\xf3\xa1\xad\xf2\x82\xb3\x76\xa2\x93\x46\xa0\x93\xc7\x7d\x41\xf8\x4a\xd5\x30\x4d\x45\xc7\x19\xf4\x4e\x9e\x60\xe1\xcc\x88\x70\x50\xb6\x86\xad\x7f\x6d\x38\xf3\x42\x4a\x65\x0f\xeb\x12\xce\x9c\xdf\x19\xe1\x23\xf0\x45\x49\x1a\xeb\xfb\xed\xf6\x73\xc3\xd9\x88\xea\x30\x52\xfd\xb8\x3d\x8e\x0d\x8f\xa0\x61\x0e\x01\x2d\x6d\x08\x8d\xd7\x82\x30\xee\x78\x76\x96\x36\xcf\xc2\x28\x7d\xaa\x8d\xb3\x6e\xf2\x62\xc0\x86\x33\xa9\x26\xaf\xc5\xa9\xee\xb5\x1b\x7e\x35\x9c\xc5\xbe\x36\x42\xab\x83\xad\x07\xb4\x84\xa1\x59\xdb\xda\x90\xf3\x75\xf9\xf0\x25\xa0\xf9\x20\xa3\xf4\x7f\x95\xc8\x0a\x6c\x70\xda\x85\xfa\x6e\xb7\xdb\x5d\xe4\x9c\xa5\xe0\xf4\x14\xa5\x56\x6b\x56\x6c\xf6\x03\x1e\xb7\xc7\x97\xe6\xc6\x46\x10\x33\xb9\xf7\xec\x0f\x71\x03\x63\xef\x19\x95\xf5\x33\xbd\xf9\xba\xf2\xa4\x81\x26\xf5\x1b\xeb\xfb\x55\xe8\xaf\x3e\xd9\xb5\xd6\x3b\x22\x67\xd6\x96\xde\xf1\xf7\x33\x91\xb3\x57\x8f\x12\x65\xf9\x98\x19\x7b\x17\x24\x86\x7a\x72\x5a\x49\xa0\x51\xd9\xdb\x93\x2f\x77\xb7\xb2\xf5\xd6\xbf\xc2\x27\x65\xbc\x0b\x24\x2c\x25\x11\xd6\x56\x29\x56\x97\x00\x56\x39\x81\xe9\x3b\xa5\x4a\x0a\x12\xe9\x84\x36\x73\xd0\xfb\x62\x59\xa0\xfc\xa1\x34\x3e\x7d\xff\x06\xe7\x73\x0c\x5f\x2b\xd5\x11\x94\xdc\xa7\x3c\x77\x6d\x25\xd5\x31\x65\xd5\x0b\x9b\xca\x1f\xc3\x54\x74\x65\x59\x96\x6d\x15\x01\xff\x06\x2a\x8d\x91\x28\x01\xd8\x8d\xc0\x6a\x47\x8a\x7c\x6c\x30\xdb\xfe\x76\x1f\x8a\x04\x9b\x83\xfe\x79\x15\x03\x2b\x0c\x7e\xac\x1d\x85\x9e\x71\x5f\x14\xe0\xb5\x18\x70\x74\x5a\x62\xd8\x17\x5f\x63\x94\x40\x58\x10\x9a\x30\xd8\x98\xfb\x38\xe5\xf5\x12\x8c\x18\xb0\x80\x6a\x15\xbf\x9c\x49\x56\x9f\xe6\xde\xa8\x55\xdf\xcb\x34\xe6\x53\xfa\x6d\xab\x0c\x8c\xa3\x66\x6f\xb2\xcf\xd1\xdc\xcb\xf7\x34\x04\xe5\x29\x2f\xe0\xf2\xf7\x5a\x6b\xab\xfc\x3a\x2c\x0b\xa0\x95\xf1\xb9\xf8\x13\x00\x00\xff\xff\x21\x22\x46\x1d\x42\x04\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 1090, mode: os.FileMode(420), modTime: time.Unix(1567708650, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

